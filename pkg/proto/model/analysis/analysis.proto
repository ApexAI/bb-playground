syntax = "proto3";

package buildbarn.playground.model.analysis;

import "pkg/proto/model/build/build.proto";
import "pkg/proto/model/core/core.proto";
import "pkg/proto/model/filesystem/filesystem.proto";
import "pkg/proto/model/starlark/starlark.proto";

option go_package = "github.com/buildbarn/bb-playground/pkg/proto/model/analysis";

message AllModuleInstances {
  message Key {}

  message Value {
    repeated string module_instances = 1;
  }
}

message BuildSpecification {
  message Key {}

  message Value {
    buildbarn.playground.model.build.BuildSpecification build_specification = 1;
  }
}

message BuiltinsModuleNames {
  message Key {}

  message Value {
    repeated string builtins_module_names = 1;
  }
}

message BuildResult {
  message Key {}

  message Value {}
}

// CanonicalRepoName resolves the canonical name of a repo, given its
// apparent name and the name of the repo which attempts to access it.
message CanonicalRepoName {
  message Key {
    // The canonical name of the repo from which the apparent repo is
    // being accessed.
    string from_canonical_repo = 1;

    // The apparent name of the repo which is being accessed.
    string to_apparent_repo = 2;
  }

  message Value {
    // The resolved canonical name of the repo which is being accessed.
    string to_canonical_repo = 1;
  }
}

message CompiledBzlFile {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    repeated string builtins_module_names = 2;
  }

  message Value {
    buildbarn.playground.model.starlark.CompiledProgram compiled_program = 1;
  }
}

message CompiledBzlFileDecodedGlobals {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    repeated string builtins_module_names = 2;
  }
}

message CompiledBzlFileFunctionFactory {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    repeated string builtins_module_names = 2;
  }
}

message CompiledBzlFileGlobal {
  message Key {
    string identifier = 1;
  }

  message Value {
    buildbarn.playground.model.starlark.Value global = 1;
  }
}

message ConfiguredRule {
  message Key {
    // The canonical Starlark identifier of the rule whose
    string identifier = 1;

    // TODO: Add a configuration ID field.
  }

  message Value {
    message ExecGroup {
      message Toolchain {
        // Starlark identifier of the toolchain type.
        string toolchain_type = 1;

        repeated buildbarn.playground.model.starlark.NamedValue
            toolchain_info_fields = 2;
      }

      // The name of the execution group. The empty string is used to
      // denote the rule's default execution group.
      string name = 1;

      // Resolved toolchains that are used by actions running in this
      // execution group.
      repeated Toolchain Toolchains = 2;

      // TODO: Add the actual execution platform here as well.
    }

    // Execution groups that are declared by the rule, with their
    // resolved execution platforms and toolchains. Execution groups
    // are sorted by name.
    repeated ExecGroup exec_groups = 1;

    // TODO: Expose the values of private attributes.
  }
}

message ConfiguredRuleObject {
  message Key {
    // The canonical Starlark identifier of the rule whose properties
    // need to be obtained.
    string identifier = 1;

    // TODO: Add a configuration ID field.
  }
}

message ConfiguredTarget {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name if it matches the last
    // component of the package path.
    string label = 1;
  }

  message Value {
    // The values of the provider instances that this target produced,
    // sorted alphabetically by provider identifier.
    repeated buildbarn.playground.model.starlark.Struct provider_instances = 1;
  }
}

message DirectoryAccessParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.DirectoryAccessParameters
        directory_access_parameters = 1;
  }
}

message DirectoryCreationParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.DirectoryCreationParameters
        directory_creation_parameters = 1;
  }
}

message DirectoryCreationParametersObject {
  message Key {}
}

message FileAccessParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.FileAccessParameters
        file_access_parameters = 1;
  }
}

message FileCreationParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.FileCreationParameters
        file_creation_parameters = 1;
  }
}

message FileCreationParametersObject {
  message Key {}
}

message FileProperties {
  message Key {
    // The canonical name of the repo that contains the file whose
    // properties are being requested.
    string canonical_repo = 1;

    // Path of the files whose properties are being requested, relative
    // to the root of the repo. The path MUST NOT contain "." or ".."
    // components. It also MUST NOT contain leading, trailing, or
    // redundant slashes.
    string path = 2;
  }

  message Value {
    // If set, the file exists, and its properties are provided.
    buildbarn.playground.model.filesystem.FileProperties exists = 1;
  }
}

message FileReader {
  message Key {}
}

message HttpArchiveContents {
  message Key {
    enum Format {
      // The format of the archive is not specified.
      UNKNOWN = 0;

      // Gzip compressed tarball.
      TAR_GZ = 1;

      // ZIP archive, using the file format documented at
      // https://support.pkware.com/pkzip/appnote.
      ZIP = 2;
    }

    // The URL to fetch.
    string url = 1;

    // The format of the archive.
    Format format = 2;

    // Optional checksum of the archive to download, provided in the
    // Subresource Integrity (SRI) format.
    string integrity = 3;
  }

  message Value {
    // If set, the archive was fetched and extracted successfully. If
    // not set, fetching the file failed with a HTTP 404 status code.
    buildbarn.playground.model.core.Reference exists = 1;
  }
}

message HttpFileContents {
  message Key {
    // The URL to fetch.
    string url = 1;

    // Optional checksum of the file to download, provided in the
    // Subresource Integrity (SRI) format.
    string integrity = 3;
  }

  message Value {
    message Exists {
      // The contents of the file, if the file was non-empty.
      buildbarn.playground.model.filesystem.FileContents contents = 1;
    }

    // If set, the file was fetched successfully. If not set, fetching
    // the file failed with a HTTP 404 status code.
    Exists exists = 1;
  }
}

message ModuleDotBazelContents {
  message Key {
    // The module instance whose MODULE.bazel file needs to be obtained.
    string module_instance = 1;
  }

  message Value {
    // The contents of the module instance's MODULE.bazel file, if the
    // file was non-empty.
    buildbarn.playground.model.filesystem.FileContents contents = 1;
  }
}

message ModuleRegistryUrls {
  message Key {}

  message Value {
    // URLs of registries from which modules may be downloaded.
    repeated string registry_urls = 1;
  }
}

message ModuleRepoMapping {
  message Key {
    // The module instance for which a mapping of repos needs to be
    // computed.
    string module_instance = 1;
  }

  message Value {
    message Mapping {
      // The name of the apparent repo that is visible from within the
      // module.
      string from_apparent_repo = 1;

      // The name of the canonical repo to which the apparent repo
      // maps.
      string to_canonical_repo = 2;
    }

    // The list of repos that can be accessed from within this module
    // instance, sorted alphabetically by apparent repo.
    repeated Mapping mappings = 1;
  }
}

message ModuleExtensionRepo {
  message Key {
    string canonical_repo = 1;
  }

  message Value {
    buildbarn.playground.model.starlark.Repo.Definition definition = 1;
  }
}

message ModuleExtensionRepos {
  message Key {
    string module_extension = 1;
  }

  message Value {
    message RepoList {
      message Element {
        message Parent {
          // Reference to an object of type RepoList that contains
          // properties of repos in the module extension.
          buildbarn.playground.model.core.Reference reference = 1;

          // The name of the first repo contained in this B-tree.
          // This field can be used to efficiently look up repos
          // contained in the B-tree.
          string first_name = 2;
        }

        oneof level {
          // Properties of a single repo.
          buildbarn.playground.model.starlark.Repo leaf = 1;

          // More repos are stored in another object.
          Parent parent = 2;
        }
      }

      // B-tree of repos declared by the module extension. Repos are
      // sorted by name.
      repeated Element elements = 1;
    }

    // Successfully executed the module extension's implementation
    // function, and extracted the repos declared by it.
    repeated RepoList.Element repos = 1;
  }
}

message BuildListModule {
  // The name of the module.
  string name = 1;

  // The version of the module.
  string version = 2;

  // The compatibility level of the module.
  int32 compatibility_level = 3;

  // The URL of the registry in which the module was found.
  string registry_url = 4;
}

message ModuleFinalBuildList {
  message Key {}

  message Value {
    // Modules that were referenced by the main module, or one of
    // transitive dependencies, sorted by name and version.
    repeated BuildListModule build_list = 1;
  }
}

message ModuleRoughBuildList {
  message Key {}

  message Value {
    repeated BuildListModule build_list = 1;
  }
}

message OverridesListModule {
  // Name of the module.
  string name = 1;

  // If multiple_version_override() is called, a sorted list of
  // version numbers that are permitted to coexist.
  repeated string versions = 2;
}

message ModulesWithMultipleVersions {
  message Key {}

  message Value {
    // Alphabetically sorted list of modules for which overrides are
    // in place. For these modules, computation of the rough build
    // list may assume that sources can be accessed directly, without
    // needing to separately load a MODULE.bazel file from Bazel
    // Central Registry (BCR).
    repeated OverridesListModule overrides_list = 1;
  }
}

message ModulesWithMultipleVersionsObject {
  message Key {}
}

message ModulesWithOverrides {
  message Key {}

  message Value {
    // Alphabetically sorted list of modules for which overrides are
    // in place. For these modules, computation of the rough build
    // list may assume that sources can be accessed directly, without
    // needing to separately load a MODULE.bazel file from Bazel
    // Central Registry (BCR).
    repeated OverridesListModule overrides_list = 1;
  }
}

message Package {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name.
    string label = 1;
  }

  message Value {
    message TargetList {
      message Element {
        message Parent {
          // Reference to an object of type TargetList that contains
          // properties of targets in the package.
          buildbarn.playground.model.core.Reference reference = 1;

          // The name of the first target contained in this B-tree.
          // This field can be used to efficiently look up targets
          // contained in the B-tree.
          string first_name = 2;
        }

        oneof level {
          // Properties of a single target.
          buildbarn.playground.model.starlark.Target leaf = 1;

          // More targets are stored in another object.
          Parent parent = 2;
        }
      }

      // B-tree of targets contained within the package. Targets are
      // sorted by name.
      repeated Element elements = 1;
    }

    // Successfully processed the package's BUILD.bazel file, and
    // extracted the targets contained within.
    repeated TargetList.Element targets = 1;
  }
}

message ExecProperty {
  // The name of the remote execution property.
  string name = 1;

  // The value of the remote execution property.
  string value = 2;
}

message RegisteredExecutionPlatforms {
  message Key {}

  message Value {
    message ExecutionPlatform {
      message Constraint {
        // The label of the constraint_setting() target.
        string setting = 1;

        // The label of the constraint_value() target.
        string value = 2;
      }

      // Constraints that apply to the execution platform, such as the
      // CPU architecture or operating system. Constraints are sorted
      // alphabetically by setting.
      repeated Constraint constraints = 1;

      // Properties that need to be sent to the remote execution
      // system to select appropriate workers. Properties are sorted
      // alphabetically by name.
      repeated ExecProperty exec_properties = 2;

      // TODO: Also add flags, required_settings, etc.?
    }

    // List of platforms that are available for executing commands,
    // ordered by decreasing preference.
    repeated ExecutionPlatform execution_platforms = 1;
  }
}

message RegisteredRepoPlatform {
  message Key {}

  message Value {
    message EnvironmentVariable {
      // The name of the environment variable.
      string name = 1;

      // The value of the environment variable.
      string value = 2;
    }

    // Properties that need to be sent to the remote execution
    // system to select appropriate workers. Properties are sorted
    // alphabetically by name.
    repeated ExecProperty exec_properties = 1;

    // The name of the architecture to announce via repository_os.arch.
    string repository_os_arch = 2;

    // Environment variables to announce via repository_os.environ.
    repeated EnvironmentVariable repository_os_environ = 3;

    // The name of the operating system to announce via
    // repository_os.name.
    string repository_os_name = 4;
  }
}

message RegisteredToolchains {
  message Key {}

  message Value {}
}

message Repo {
  message Key {
    // The canonical name of the repo whose file contents are being
    // requested.
    string canonical_repo = 1;
  }

  message Value {
    // The root directory containing the files in the repository.
    buildbarn.playground.model.core.Reference root_directory_reference = 1;
  }
}

message RepoDefaultAttrs {
  message Key {
    // The canonical name of the repo for which the defaults specified
    // in REPO.bazel are requested.
    string canonical_repo = 1;
  }

  message Value {
    // Default values of attributes that need to be attached to all
    // targets in this repo.
    buildbarn.playground.model.starlark.InheritableAttrs inheritable_attrs = 1;
  }
}

message ResolvedToolchains {
  message Key {
    // The set of toolchains to resolve, and any constraints placed on
    // the execution platform.
    buildbarn.playground.model.starlark.ExecGroup exec_group = 1;
  }

  message Value {
    // TODO: Put the name of the selected execution platform in here.

    // Identifiers of the resolved toolchains, using the same order as
    // the toolchain types in the key. Any optional toolchains that
    // could not be resolved will have their identifier set to the
    // empty string.
    repeated string resolved_toolchain_identifiers = 1;
  }
}

message RootModule {
  message Key {}

  message Value {
    // The name of the root module.
    string root_module_name = 1;

    // Whether to ignore `bazel_dep` and `use_extension` declared as
    // `dev_dependency` in the MODULE.bazel of the root module. Note
    // that such dependencies are always ignored in the MODULE.bazel
    // file of modules other than the root module.
    bool ignore_root_module_dev_dependencies = 2;
  }
}

message Target {
  message Key {
    // The label of the target whose properties to obtain.
    string label = 1;
  }

  message Value {
    buildbarn.playground.model.starlark.Target.Definition definition = 1;
  }
}

message TargetCompletion {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name if it matches the last
    // component of the package path.
    string label = 1;
  }

  message Value {}
}

message ModuleExtension {
  message User {
    // The module instance that uses the module extension.
    string module_instance = 1;

    // Whether the module instance is the root module.
    bool is_root = 2;

    // Tag classes for which one or more tags are provided by this
    // module instance.
    repeated TagClass tag_classes = 3;
  }

  message TagClass {
    // Starlark identifier of the tag class.
    string name = 1;

    // One or more tags of this class that have been provided.
    repeated Tag tags = 2;
  }

  message Tag {
    // Attributes that are provided to this tag, sorted alphabetically
    // by name.
    //
    // No attempts have been performed to canonicalize the values of
    // these attributes. For example, this means that labels may be
    // stored as plain strings that later on need to be resolved to the
    // proper canonical target.
    repeated buildbarn.playground.model.starlark.NamedValue attrs = 1;

    // Whether the tag was specified on the result of a use_extension()
    // call with dev_dependency = True.
    bool is_dev_dependency = 2;
  }

  // Canonical Starlark identifier of the module_extension() object.
  string identifier = 1;

  // Modules instances that use the module extension. The order of this
  // list is the same as a breadth-first search starting from the root
  // module.
  repeated User users = 2;
}

message RepositoryRuleObject {
  message Key {
    // The canonical Starlark identifier of the repository rule whose
    // properties need to be obtained.
    string identifier = 1;
  }
}

message UsedModuleExtension {
  message Key {
    string module_extension = 1;
  }

  message Value {
    ModuleExtension module_extension = 1;
  }
}

message UsedModuleExtensions {
  message Key {}

  message Value {
    // List of module extensions that has one or more users. Module
    // extensions are sorted by module extension name, which can be
    // derived from the canonical Starlark identifier of the
    // module_extension() object.
    repeated ModuleExtension module_extensions = 1;
  }
}
