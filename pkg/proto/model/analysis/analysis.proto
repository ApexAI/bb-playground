syntax = "proto3";

package buildbarn.playground.model.analysis;

import "pkg/proto/model/build/build.proto";
import "pkg/proto/model/core/core.proto";
import "pkg/proto/model/filesystem/filesystem.proto";
import "pkg/proto/model/starlark/starlark.proto";

option go_package = "github.com/buildbarn/bb-playground/pkg/proto/model/analysis";

message BuildSpecification {
  message Key {}

  message Value {
    buildbarn.playground.model.build.BuildSpecification build_specification = 1;
  }
}

message BuildResult {
  message Key {}

  message Value {}
}

// CanonicalRepoName resolves the canonical name of a repo, given its
// apparent name and the name of the repo which attempts to access it.
message CanonicalRepoName {
  message Key {
    // The canonical name of the repo from which the apparent repo is
    // being accessed.
    string from_canonical_repo = 1;

    // The apparent name of the repo which is being accessed.
    string to_apparent_repo = 2;
  }

  message Value {
    oneof result {
      // The resolved canonical name of the repo which is being accessed.
      string to_canonical_repo = 1;

      // Resolution failed.
      string failure = 2;
    }
  }
}

message CompiledBzlFile {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    bool builtin = 2;
  }

  message Value {
    oneof result {
      buildbarn.playground.model.starlark.CompiledProgram compiled_program = 1;
      string failure = 2;
    }
  }
}

message CompiledBzlFileFunctions {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    bool builtin = 2;
  }
}

message CompiledBzlFileGlobals {
  message Key {
    // The label of the .bzl file. The label MUST include a canonical
    // repo name.
    string label = 1;

    bool builtin = 2;
  }
}

message ConfiguredTarget {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name if it matches the last
    // component of the package path.
    string label = 1;
  }

  message Value {
    oneof result {
      string failure = 1;
    }
  }
}

message DirectoryAccessParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.DirectoryAccessParameters
        directory_access_parameters = 1;
  }
}

message FileAccessParameters {
  message Key {}

  message Value {
    buildbarn.playground.model.filesystem.FileAccessParameters
        file_access_parameters = 1;
  }
}

message FileProperties {
  message Key {
    // The canonical name of the repo that contains the file whose
    // properties are being requested.
    string canonical_repo = 1;

    // Path of the files whose properties are being requested, relative
    // to the root of the repo. The path MUST NOT contain "." or ".."
    // components. It also MUST NOT contain leading, trailing, or
    // redundant slashes.
    string path = 2;
  }

  message Value {
    oneof result {
      // If set, the file exists, and its properties are provided.
      buildbarn.playground.model.filesystem.FileProperties exists = 1;

      string failure = 2;
    }
  }
}

message FileReader {
  message Key {}
}

message Package {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name.
    string label = 1;
  }

  message Value {
    oneof result {
      string failure = 1;
    }
  }
}

message Repo {
  message Key {
    // The canonical name of the repo that contains the file whose
    // properties are being requested.
    string canonical_repo = 1;
  }

  message Value {
    oneof result {
      // The repository was obtained successfully. The root directory,
      // containing the files in the repository is provided.
      buildbarn.playground.model.core.Reference root_directory_reference = 1;

      // Failed to obtain files belonging to the repository.
      string failure = 2;
    }
  }
}

message TargetCompletion {
  message Key {
    // The label of the package. The label MUST include a canonical repo
    // name, and MUST NOT include a target name if it matches the last
    // component of the package path.
    string label = 1;
  }

  message Value {}
}
