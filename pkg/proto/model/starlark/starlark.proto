syntax = "proto3";

package buildbarn.playground.model.starlark;

import "google/protobuf/empty.proto";
import "pkg/proto/model/core/core.proto";

option go_package = "github.com/buildbarn/bb-playground/pkg/proto/model/starlark";

message CompiledProgram {
  repeated NamedValue globals = 1;

  bytes code = 2;
}

message Value {
  oneof kind {
    Aspect aspect = 1;
    Attr attr = 2;
    bool bool = 3;
    string builtin = 4;
    bytes bytes = 5;
    Depset depset = 6;
    Dict dict = 7;
    Function function = 8;
    bytes int = 9;
    string label = 10;
    List list = 11;
    ModuleExtension module_extension = 12;
    google.protobuf.Empty none = 13;
    Provider provider = 14;
    RepositoryRule repository_rule = 15;
    Rule rule = 16;
    Runfiles runfiles = 17;
    Select select = 18;
    string str = 19;
    Struct struct = 20;
    Subrule subrule = 21;
    TagClass tag_class = 22;
    ToolchainType toolchain_type = 23;
    Transition transition = 24;
    Tuple tuple = 25;
  }
}

// NamedValue can be used in places where values need to be associated
// with names, such as structs.
message NamedValue {
  string name = 1;
  Value value = 2;
}

message Alias {
  // The label of the target to which the alias expands.
  Select.Group actual = 1;

  // The visibility of the alias, which may differ from the visibility
  // of the target to which the alias expands.
  PackageGroup visibility = 2;
}

message Aspect {
  message Definition {}

  oneof kind {
    string reference = 1;

    Definition definition = 2;
  }
}

message Attr {
  // If set, the attribute is optional, and this field denotes the value
  // that is used if no explicit value is provided. The type of the
  // value must be consistent with the type of this attribute, or it
  // must be a function. If it is a function, it is invoked to compute
  // the default value if none is provided.
  //
  // If not set, the attribute is mandatory.
  Value default = 1;

  // Options that apply to all attribute types containing labels.
  message LabelOptions {
    repeated string providers = 1;

    repeated string aspects = 2;

    oneof cfg {
      // Don't perform any transition.
      google.protobuf.Empty cfg_target = 3;

      // Transition to the platform of the named execution group.
      string cfg_exec_group = 4;

      // Apply a user-defined transition.
      string cfg_transition_identifier = 5;
    }

    // If non-empty, allow file targets having one of the file
    // extensions listed. If file targets with any name should be
    // allowed, the list should contain the empty string.
    repeated string allow_files = 6;
  }

  // Options that apply to all attribute types containing dicts or
  // lists.
  message CompositeOptions {
    // Whether the dict or list can be empty.
    bool allow_empty = 1;
  }

  message IntType {
    // The list of allowed values for this attribute.
    repeated int32 values = 1;
  }

  message IntListType {
    CompositeOptions list_options = 1;
  }

  message LabelType {
    LabelOptions value_options = 1;

    bool allow_none = 2;

    // Only allow file targets corresponding to a single file. If this
    // field is set, LabelOptions.allow_files must be set as well.
    bool allow_single_file = 3;

    // True if the dependency has to be executable. This means the label
    // must refer to an executable file, or to a rule that outputs an
    // executable file.
    bool executable = 4;
  }

  message LabelKeyedStringDictType {
    CompositeOptions dict_options = 1;

    LabelOptions dict_key_options = 2;
  }

  message LabelListType {
    CompositeOptions list_options = 1;

    LabelOptions list_value_options = 2;
  }

  message OutputListType {
    CompositeOptions list_options = 1;
  }

  message StringType {
    // The list of allowed values for this attribute.
    repeated string values = 1;
  }

  message StringDictType {
    CompositeOptions dict_options = 1;
  }

  message StringListType {
    CompositeOptions list_options = 1;
  }

  message StringListDictType {
    CompositeOptions dict_options = 1;
  }

  oneof type {
    // Accept bool values.
    google.protobuf.Empty bool = 2;

    // Accept int32 values.
    IntType int = 3;

    // Accept []int32 values.
    IntListType int_list = 4;

    // Accept Label values.
    LabelType label = 5;

    // Accept map[Label]string values.
    LabelKeyedStringDictType label_keyed_string_dict = 6;

    // Accept []Label values.
    LabelListType label_list = 7;

    // Accept string values, denoting the name of an output file.
    google.protobuf.Empty output = 8;

    // Accept []string values, denoting the names of output files.
    OutputListType output_list = 9;

    // Accept string values.
    StringType string = 10;

    // Accept map[string]string values.
    StringDictType string_dict = 11;

    // Accept []string values.
    StringListType string_list = 12;

    // Accept map[string][]string values.
    StringListDictType string_list_dict = 13;
  }
}

message BuildSetting {
  // Whether or not this build setting is callable on the command line.
  bool flag = 1;

  message StringListType {
    // If set, instead of expecting a comma-separated value, this flag
    // is allowed to be set multiple times on the command line with each
    // individual value treated as a single string to add to the list
    // value. Insertion order and repeated values are both maintained.
    //
    // This list can be post-processed in the build setting
    // implementation function if different behavior is desired.
    bool repeatable = 1;
  }

  oneof type {
    // Accept bool values.
    google.protobuf.Empty bool = 2;

    // Accept int32 values.
    google.protobuf.Empty int = 3;

    // Accept string values.
    google.protobuf.Empty string = 4;

    // Accept []string values.
    StringListType string_list = 5;
  }
}

message Depset {}

message Dict {
  message Entry {
    message Leaf {
      Value key = 1;
      Value value = 2;
    }

    message Parent {
      buildbarn.playground.model.core.Reference reference = 1;
    }

    oneof level {
      Leaf leaf = 1;
      Parent parent = 2;
    }
  }

  repeated Entry entries = 1;
}

message ExecGroup {
  // Set of constraints on the execution platform, deduplicated and
  // sorted alphabetically.
  repeated string exec_compatible_with = 1;

  // Set of toolchains this execution group requires, deduplicated and
  // sorted alphabetically by ToolchainType.toolchain_type.
  repeated ToolchainType toolchains = 2;
}

message SourceFileTarget {
  // Visibility of the file target.
  PackageGroup visibility = 4;
}

message Function {
  // The name of the .bzl file declaring the function.
  string filename = 1;

  // The line at which the function is declared.
  int32 line = 2;

  // The column at which the function is declared.
  int32 column = 3;

  // The name of the function. This may be set to "lambda" for anonymous
  // functions.
  string name = 4;

  message Closure {
    // The index of the function within the compiled bytecode.
    uint32 index = 1;

    message DefaultParameter {
      // If set, the parameter is optional, and the default value is
      // provided.
      Value value = 1;
    }

    // Default values of parameters of the function.
    repeated DefaultParameter default_parameters = 2;

    // If the function is a nested function or lambda, the values of free
    // variables.
    repeated Value free_variables = 3;
  }

  // If set, the function is a nested or anonymous function, meaning it
  // cannot be decoded by name alone.
  Closure closure = 5;
}

message InheritableAttrs {
  // Explanatory warning message associated with the target, indicating
  // the reason its use is deprecated.
  string deprecation = 1;

  // Metadata targets. These are typically targets related to OSS
  // package and license declarations.
  repeated string package_metadata = 2;

  // If true, only testonly targets (such as tests) can depend on this
  // target.
  bool testonly = 3;

  // Which targets in other packages are permitted to depend on this
  // target.
  PackageGroup visibility = 4;
}

message List {
  message Element {
    message Parent {
      buildbarn.playground.model.core.Reference reference = 1;
    }

    oneof level {
      Value leaf = 1;
      Parent parent = 2;
    }
  }

  repeated Element elements = 1;
}

message ModuleExtension {
  message NamedTagClass {
    // The name that can be used to declare tags of this class in
    // MODULE.bazel.
    string name = 1;

    // The attributes that can be provided to tags of this class.
    TagClass tag_class = 2;
  }

  // Starlark function that implements this module extension.
  Function implementation = 1;

  // List of tag classes that are provided by the module extension.
  // These tag classes may be invoked from within MODULE.bazel.
  repeated NamedTagClass tag_classes = 2;
}

message PackageGroup {
  message Package {
    // At the root level, the canonical repo for which inclusion is
    // specified. For the levels below, a directory name of the
    // package path.
    string component = 1;

    // If set, include the current package in this group.
    bool include_package = 2;

    // Data on whether subpackages are part of the package group. This
    // field MUST be set, even if no subpackages are included.
    Subpackages subpackages = 3;
  }

  message Subpackages {
    message Overrides {
      repeated Package packages = 1;
    }

    // If set, include all direct or transitive subpackages of the
    // current package in this group.
    bool include_subpackages = 1;

    // If set, the package contains one or more direct or transitive
    // subpackages whose inclusion differs from include_subpackages.
    oneof overrides {
      // Set if there are too many overrides to store in the current
      // object.
      buildbarn.playground.model.core.Reference overrides_external = 2;

      // Set if there are only few overrides.
      Overrides overrides_inline = 3;
    }
  }

  // Tree of packages that are included in this package group, stored in
  // the form of a tree.
  Subpackages tree = 1;

  // Alphabetically sorted list of package groups that should be merged
  // into this one.
  repeated string include_package_groups = 2;
}

message Provider {
  string provider_identifier = 1;

  Function init_function = 2;
}

message Struct {
  // The fields contained within the struct.
  repeated NamedValue fields = 1;

  // If set, the struct was created by invoking a provider. The value
  // corresponds to the identifier of the provider.
  string provider_identifier = 2;
}

message TagClass {
  // Attributes of the tag class, sorted by name.
  repeated NamedAttr attrs = 1;
}

message ToolchainType {
  // Label of the toolchain.
  string toolchain_type = 1;

  // Whether the rule considers the toolchain to be mandatory or
  // optional.
  bool mandatory = 2;
}

message Tuple {
  repeated Value elements = 1;
}

message NamedAttr {
  // The name of the attribute.
  string name = 1;

  // The properties of the attribute.
  Attr attr = 2;
}

message NamedExecGroup {
  // The name of the execution group. The empty string is used to denote
  // the target's default execution platform.
  string name = 1;

  // The properties of the execution group.
  ExecGroup exec_group = 2;
}

message Repo {
  message Definition {
    // Identifier of the repository rule used by this target.
    string repository_rule_identifier = 1;

    // Repository rule specific attributes whose values were provided
    // explicitly.
    repeated NamedValue attr_values = 2;
  }

  // Name of the repo within the module extension.
  string name = 1;

  Definition definition = 2;
}

message RepositoryRule {
  message Definition {
    // Attributes of the repository rule, sorted by name.
    repeated NamedAttr attrs = 1;

    // Starlark function that implements this rule.
    Function implementation = 2;
  }

  oneof kind {
    string reference = 1;

    Definition definition = 2;
  }
}

message Rule {
  message Definition {
    // Attributes of the rule, sorted by name.
    repeated NamedAttr attrs = 1;

    // If set, describes what kind of build setting this rule is. A
    // mandatory attribute named build_setting_default is automatically
    // added to this rule, with a type corresponding to that of the
    // build setting.
    BuildSetting build_setting = 2;

    // If set, the identifier of the user-defined transition to apply to
    // its own configuration before analysis.
    string cfg_transition_identifier = 3;

    // Execution groups of the rule, sorted by name.
    repeated NamedExecGroup exec_groups = 4;

    // Starlark function that implements this rule.
    Function implementation = 5;

    // Stalark function initializing the attributes of the rule.
    Function initializer = 6;

    // List of providers that the implementation function must return,
    // sorted by name.
    repeated string provides = 7;
  }

  oneof kind {
    string reference = 1;

    Definition definition = 2;
  }
}

message RuleTarget {
  message AttrValue {
    // The name of the attribute whose value is provided.
    string name = 1;

    // The value of the attribute, in the form of a sequence of select()
    // expressions whose values need to be summed/concatenated.
    repeated Select.Group value_parts = 2;
  }

  // Identifier of the rule used by this target.
  string rule_identifier = 1;

  // Rule specific attributes whose values were provided explicitly.
  repeated AttrValue attr_values = 2;

  // A list of constraint_values that must be present in the execution
  // platform for this target. This is in addition to any constraints
  // already set by the rule type. Constraints are used to restrict the
  // list of available execution platforms.
  repeated string exec_compatible_with = 3;

  // Tags that were attached to the target, sorted alphabetically.
  repeated string tags = 4;

  // A list of constraint_values that must be present in the target
  // platform for this target to be considered compatible. This is in
  // addition to any constraints already set by the rule type. If the
  // target platform does not satisfy all listed constraints then the
  // target is considered incompatible.
  repeated string target_compatible_with = 5;

  // Attributes on rule targets that are inherited from calls to repo()
  // in REPO.bazel and package() in BUILD.bazel.
  InheritableAttrs inheritable_attrs = 6;
}

message Runfiles {}

message Select {
  message Condition {
    string condition_identifier = 1;
    Value value = 2;
  }

  message Group {
    // Conditions that are present in the select() expression, sorted
    // alphabetically by condition identifier.
    repeated Condition conditions = 1;

    oneof no_match {
      // If none of the conditions match, yield a given value.
      Value no_match_value = 2;

      // If none of the conditions match, return a custom error message
      // to return to the user.
      string no_match_error = 3;
    }
  }

  enum ConcatenationOperator {
    NONE = 0;
    PIPE = 1;
    PLUS = 2;
  }

  // Non-empty list of groups of select() expressions that have been
  // concatenated using the pipe ("|") or plus ("+") operators.
  repeated Group groups = 1;

  // If there are multiple groups, the operator that was used to
  // concatenate.
  ConcatenationOperator concatenation_operator = 2;
}

message Subrule {
  message Definition {}

  oneof kind {
    string reference = 1;

    Definition definition = 2;
  }
}

message Target {
  message Definition {
    oneof kind {
      // Reference to another target.
      Alias alias = 1;

      // Group of packages, used to control visibility of targets.
      PackageGroup package_group = 2;

      // Buildable target backed by a rule.
      RuleTarget rule_target = 3;

      // File exposed via exports_files() or referenced by a rule
      // target's attribute.
      SourceFileTarget source_file_target = 4;
    }
  }

  // Name of the target within the package.
  string name = 1;

  Definition definition = 2;
}

message Transition {
  message Definition {}

  oneof kind {
    string reference = 1;

    Definition definition = 2;
  }
}
