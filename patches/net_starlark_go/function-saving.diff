diff --git internal/compile/compile.go internal/compile/compile.go
index b257d70..c171dc6 100644
--- internal/compile/compile.go
+++ internal/compile/compile.go
@@ -29,6 +29,7 @@ import (
 	"bytes"
 	"fmt"
 	"log"
+	"math"
 	"os"
 	"path/filepath"
 	"strconv"
@@ -340,6 +341,7 @@ type Funcode struct {
 	NumParams             int
 	NumKwonlyParams       int
 	HasVarargs, HasKwargs bool
+	Index                 uint32
 
 	// -- transient state --
 
@@ -364,7 +366,6 @@ type pcomp struct {
 
 	names     map[string]uint32
 	constants map[interface{}]uint32
-	functions map[*Funcode]uint32
 }
 
 // An fcomp holds the compiler state for a Funcode.
@@ -503,7 +504,6 @@ func File(opts *syntax.FileOptions, stmts []syntax.Stmt, pos syntax.Position, na
 		},
 		names:     make(map[string]uint32),
 		constants: make(map[interface{}]uint32),
-		functions: make(map[*Funcode]uint32),
 	}
 	pcomp.prog.Toplevel = pcomp.function(name, pos, stmts, locals, nil)
 
@@ -521,6 +521,7 @@ func (pcomp *pcomp) function(name string, pos syntax.Position, stmts []syntax.St
 			Doc:      docStringFromBody(stmts),
 			Locals:   bindings(locals),
 			FreeVars: bindings(freevars),
+			Index:    math.MaxUint32,
 		},
 	}
 
@@ -980,13 +981,11 @@ func (pcomp *pcomp) constantIndex(v interface{}) uint32 {
 // functionIndex returns the index of the specified function
 // AST the nestedfun pool, adding it if necessary.
 func (pcomp *pcomp) functionIndex(fn *Funcode) uint32 {
-	index, ok := pcomp.functions[fn]
-	if !ok {
-		index = uint32(len(pcomp.prog.Functions))
-		pcomp.functions[fn] = index
+	if fn.Index == math.MaxUint32 {
+		fn.Index = uint32(len(pcomp.prog.Functions))
 		pcomp.prog.Functions = append(pcomp.prog.Functions, fn)
 	}
-	return index
+	return fn.Index
 }
 
 // string emits code to push the specified string.
diff --git internal/compile/serial.go internal/compile/serial.go
index 0dbae47..af003d7 100644
--- internal/compile/serial.go
+++ internal/compile/serial.go
@@ -267,10 +267,10 @@ func DecodeProgram(data []byte) (_ *Program, err error) {
 	}
 
 	globals := d.bindings()
-	toplevel := d.function()
+	toplevel := d.function(math.MaxUint32)
 	funcs := make([]*Funcode, d.int())
 	for i := range funcs {
-		funcs[i] = d.function()
+		funcs[i] = d.function(uint32(i))
 	}
 	recursion := d.int() != 0
 
@@ -364,7 +364,7 @@ func (d *decoder) ints() []int {
 
 func (d *decoder) bool() bool { return d.int() != 0 }
 
-func (d *decoder) function() *Funcode {
+func (d *decoder) function(index uint32) *Funcode {
 	id := d.binding()
 	doc := d.string()
 	code := d.bytes()
@@ -395,5 +395,6 @@ func (d *decoder) function() *Funcode {
 		NumKwonlyParams: numKwonlyParams,
 		HasVarargs:      hasVarargs,
 		HasKwargs:       hasKwargs,
+		Index:           index,
 	}
 }
diff --git starlark/eval.go starlark/eval.go
index be3eb61..fe2b3bc 100644
--- starlark/eval.go
+++ starlark/eval.go
@@ -5,6 +5,7 @@
 package starlark
 
 import (
+	"errors"
 	"fmt"
 	"io"
 	"log"
@@ -444,6 +445,68 @@ func (prog *Program) Init(thread *Thread, predeclared StringDict) (StringDict, e
 	return toplevel.Globals(), err
 }
 
+func (prog *Program) NewFunctionFactory(thread *Thread, predeclared StringDict) (*FunctionFactory, StringDict, error) {
+	toplevel := makeToplevelFunction(prog.compiled, predeclared)
+	_, err := Call(thread, toplevel, nil, nil)
+	if err != nil {
+		return nil, nil, err
+	}
+
+	globals := toplevel.Globals()
+	functions := map[string]*Function{}
+	for name, value := range globals {
+		if function, ok := value.(*Function); ok {
+			functions[name] = function
+		}
+	}
+
+	return &FunctionFactory{
+			module:    toplevel.module,
+			functions: functions,
+		},
+		globals,
+		nil
+}
+
+type FunctionFactory struct {
+	module    *module
+	functions map[string]*Function
+}
+
+func (ff *FunctionFactory) NewFunctionByIndex(index uint32, defaultParameters Tuple, freevars Tuple) (*Function, error) {
+	functions := ff.module.program.Functions
+	if index >= uint32(len(functions)) {
+		return nil, errors.New("index out of bounds")
+	}
+	funcode := functions[index]
+
+	defaults := append(Tuple(nil), defaultParameters...)
+	for i := range defaults {
+		if defaults[i] == nil {
+			defaults[i] = mandatory{}
+		}
+	}
+
+	freevarsWithCells := make(Tuple, 0, len(freevars))
+	for _, v := range freevars {
+		freevarsWithCells = append(freevarsWithCells, &cell{v: v})
+	}
+
+	return &Function{
+		funcode:  funcode,
+		module:   ff.module,
+		defaults: defaults,
+		freevars: freevarsWithCells,
+	}, nil
+}
+
+func (ff *FunctionFactory) NewFunctionByName(name string) (*Function, error) {
+	if function, ok := ff.functions[name]; ok {
+		return function, nil
+	}
+	return nil, errors.New("function does not exist")
+}
+
 // ExecREPLChunk compiles and executes file f in the specified thread
 // and global environment. This is a variant of ExecFile specialized to
 // the needs of a REPL, in which a sequence of input chunks, each
diff --git starlark/value.go starlark/value.go
index d89a9f5..62d679f 100644
--- starlark/value.go
+++ starlark/value.go
@@ -701,6 +701,25 @@ type Function struct {
 	freevars Tuple
 }
 
+func (fn *Function) Index() uint32 {
+	if fn.funcode.Index == math.MaxUint32 {
+		panic("no index assigned")
+	}
+	return fn.funcode.Index
+}
+
+func (fn *Function) NumRawDefaults() int {
+	return len(fn.defaults)
+}
+
+func (fn *Function) RawDefault(i int) Value {
+	dflt := fn.defaults[i]
+	if _, ok := dflt.(mandatory); ok {
+		return nil
+	}
+	return dflt
+}
+
 // A module is the dynamic counterpart to a Program.
 // All functions in the same program share a module.
 type module struct {
